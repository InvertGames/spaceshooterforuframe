// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("SpaceShooter")]
public class PlayerShipViewModelBase : ViewModel {
    
    public P<Boolean> _IsMovingProperty;
    
    public MovementStateMachine _MovementStateMachineProperty;
    
    public P<Boolean> _FiringCommandProperty;
    
    public FireStateMachine _FireStateMachineProperty;
    
    public P<Boolean> _FireTimeOutElapsedProperty;
    
    public P<Boolean> _ShouldFireProperty;
    
    public P<Int32> _AsteroidsDestroyedProperty;
    
    public P<BaseWeaponViewModel> _WeaponProperty;
    
    public P<Boolean> _IsAliveProperty;
    
    public P<Single> _MovementSpeedProperty;
    
    protected CommandWithSender<PlayerShipViewModel> _Destroy;
    
    protected CommandWithSender<PlayerShipViewModel> _Restart;
    
    public PlayerShipViewModelBase(PlayerShipControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PlayerShipViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _IsMovingProperty = new P<Boolean>(this, "IsMoving");
        _MovementStateMachineProperty = new MovementStateMachine(this, "MovementStateMachine");
        _FiringCommandProperty = new P<Boolean>(this, "FiringCommand");
        _FireStateMachineProperty = new FireStateMachine(this, "FireStateMachine");
        _FireTimeOutElapsedProperty = new P<Boolean>(this, "FireTimeOutElapsed");
        _ShouldFireProperty = new P<Boolean>(this, "ShouldFire");
        _AsteroidsDestroyedProperty = new P<Int32>(this, "AsteroidsDestroyed");
        _WeaponProperty = new P<BaseWeaponViewModel>(this, "Weapon");
        _IsAliveProperty = new P<Boolean>(this, "IsAlive");
        _MovementSpeedProperty = new P<Single>(this, "MovementSpeed");
        this._IsMovingProperty.Subscribe(_MovementStateMachineProperty.MoveTransition);
        this._IsMovingProperty.Subscribe(_MovementStateMachineProperty.StopTransition);
        this._ShouldFireProperty.Subscribe(_FireStateMachineProperty.FireTransition);
        this._ShouldFireProperty.Subscribe(_FireStateMachineProperty.StopTransition);
    }
}

public partial class PlayerShipViewModel : PlayerShipViewModelBase {
    
    private LevelManagerViewModel _ParentLevelManager;
    
    private PowerUpBaseViewModel _ParentPowerUpBase;
    
    public PlayerShipViewModel(PlayerShipControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PlayerShipViewModel() : 
            base() {
    }
    
    public virtual P<Boolean> IsMovingProperty {
        get {
            return this._IsMovingProperty;
        }
    }
    
    public virtual Boolean IsMoving {
        get {
            return _IsMovingProperty.Value;
        }
        set {
            _IsMovingProperty.Value = value;
        }
    }
    
    public virtual MovementStateMachine MovementStateMachineProperty {
        get {
            return this._MovementStateMachineProperty;
        }
    }
    
    public virtual Invert.StateMachine.State MovementStateMachine {
        get {
            return _MovementStateMachineProperty.Value;
        }
        set {
            _MovementStateMachineProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> FiringCommandProperty {
        get {
            return this._FiringCommandProperty;
        }
    }
    
    public virtual Boolean FiringCommand {
        get {
            return _FiringCommandProperty.Value;
        }
        set {
            _FiringCommandProperty.Value = value;
        }
    }
    
    public virtual FireStateMachine FireStateMachineProperty {
        get {
            return this._FireStateMachineProperty;
        }
    }
    
    public virtual Invert.StateMachine.State FireStateMachine {
        get {
            return _FireStateMachineProperty.Value;
        }
        set {
            _FireStateMachineProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> FireTimeOutElapsedProperty {
        get {
            return this._FireTimeOutElapsedProperty;
        }
    }
    
    public virtual Boolean FireTimeOutElapsed {
        get {
            return _FireTimeOutElapsedProperty.Value;
        }
        set {
            _FireTimeOutElapsedProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> ShouldFireProperty {
        get {
            return this._ShouldFireProperty;
        }
    }
    
    public virtual Boolean ShouldFire {
        get {
            return _ShouldFireProperty.Value;
        }
        set {
            _ShouldFireProperty.Value = value;
        }
    }
    
    public virtual P<Int32> AsteroidsDestroyedProperty {
        get {
            return this._AsteroidsDestroyedProperty;
        }
    }
    
    public virtual Int32 AsteroidsDestroyed {
        get {
            return _AsteroidsDestroyedProperty.Value;
        }
        set {
            _AsteroidsDestroyedProperty.Value = value;
        }
    }
    
    public virtual P<BaseWeaponViewModel> WeaponProperty {
        get {
            return this._WeaponProperty;
        }
    }
    
    public virtual BaseWeaponViewModel Weapon {
        get {
            return _WeaponProperty.Value;
        }
        set {
            _WeaponProperty.Value = value;
            if (value != null) value.ParentPlayerShip = this;
        }
    }
    
    public virtual P<Boolean> IsAliveProperty {
        get {
            return this._IsAliveProperty;
        }
    }
    
    public virtual Boolean IsAlive {
        get {
            return _IsAliveProperty.Value;
        }
        set {
            _IsAliveProperty.Value = value;
        }
    }
    
    public virtual P<Single> MovementSpeedProperty {
        get {
            return this._MovementSpeedProperty;
        }
    }
    
    public virtual Single MovementSpeed {
        get {
            return _MovementSpeedProperty.Value;
        }
        set {
            _MovementSpeedProperty.Value = value;
        }
    }
    
    public virtual CommandWithSender<PlayerShipViewModel> Destroy {
        get {
            return _Destroy;
        }
        set {
            _Destroy = value;
        }
    }
    
    public virtual CommandWithSender<PlayerShipViewModel> Restart {
        get {
            return _Restart;
        }
        set {
            _Restart = value;
        }
    }
    
    public virtual LevelManagerViewModel ParentLevelManager {
        get {
            return this._ParentLevelManager;
        }
        set {
            _ParentLevelManager = value;
        }
    }
    
    public virtual PowerUpBaseViewModel ParentPowerUpBase {
        get {
            return this._ParentPowerUpBase;
        }
        set {
            _ParentPowerUpBase = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var playerShip = controller as PlayerShipControllerBase;
        this.Destroy = new CommandWithSender<PlayerShipViewModel>(this, playerShip.Destroy);
        this.Restart = new CommandWithSender<PlayerShipViewModel>(this, playerShip.Restart);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeBool("IsMoving", this.IsMoving);
        stream.SerializeString("MovementStateMachine", this.MovementStateMachine.Name);;
        stream.SerializeBool("FiringCommand", this.FiringCommand);
        stream.SerializeString("FireStateMachine", this.FireStateMachine.Name);;
        stream.SerializeBool("FireTimeOutElapsed", this.FireTimeOutElapsed);
        stream.SerializeBool("ShouldFire", this.ShouldFire);
        stream.SerializeInt("AsteroidsDestroyed", this.AsteroidsDestroyed);
		if (stream.DeepSerialize) stream.SerializeObject("Weapon", this.Weapon);
        stream.SerializeBool("IsAlive", this.IsAlive);
        stream.SerializeFloat("MovementSpeed", this.MovementSpeed);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.IsMoving = stream.DeserializeBool("IsMoving");;
        this._MovementStateMachineProperty.SetState(stream.DeserializeString("MovementStateMachine"));
        		this.FiringCommand = stream.DeserializeBool("FiringCommand");;
        this._FireStateMachineProperty.SetState(stream.DeserializeString("FireStateMachine"));
        		this.FireTimeOutElapsed = stream.DeserializeBool("FireTimeOutElapsed");;
        		this.ShouldFire = stream.DeserializeBool("ShouldFire");;
        		this.AsteroidsDestroyed = stream.DeserializeInt("AsteroidsDestroyed");;
		if (stream.DeepSerialize) this.Weapon = stream.DeserializeObject<BaseWeaponViewModel>("Weapon");
        		this.IsAlive = stream.DeserializeBool("IsAlive");;
        		this.MovementSpeed = stream.DeserializeFloat("MovementSpeed");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_IsMovingProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_MovementStateMachineProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_FiringCommandProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_FireStateMachineProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_FireTimeOutElapsedProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_ShouldFireProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_AsteroidsDestroyedProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_WeaponProperty, true, false, false));
        list.Add(new ViewModelPropertyInfo(_IsAliveProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_MovementSpeedProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("Destroy", Destroy) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("Restart", Restart) { ParameterType = typeof(void) });
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class AsteroidViewModelBase : ViewModel {
    
    public P<Single> _LifeProperty;
    
    public P<PowerUpBaseViewModel> _PowerUpProperty;
    
    public P<Vector3> _PositionProperty;
    
    protected CommandWithSenderAndArgument<AsteroidViewModel, Single> _Damage;
    
    protected CommandWithSenderAndArgument<AsteroidViewModel, Boolean> _Destroy;
    
    public AsteroidViewModelBase(AsteroidControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public AsteroidViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _LifeProperty = new P<Single>(this, "Life");
        _PowerUpProperty = new P<PowerUpBaseViewModel>(this, "PowerUp");
        _PositionProperty = new P<Vector3>(this, "Position");
    }
}

public partial class AsteroidViewModel : AsteroidViewModelBase {
    
    private LevelManagerViewModel _ParentLevelManager;
    
    public AsteroidViewModel(AsteroidControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public AsteroidViewModel() : 
            base() {
    }
    
    public virtual P<Single> LifeProperty {
        get {
            return this._LifeProperty;
        }
    }
    
    public virtual Single Life {
        get {
            return _LifeProperty.Value;
        }
        set {
            _LifeProperty.Value = value;
        }
    }
    
    public virtual P<PowerUpBaseViewModel> PowerUpProperty {
        get {
            return this._PowerUpProperty;
        }
    }
    
    public virtual PowerUpBaseViewModel PowerUp {
        get {
            return _PowerUpProperty.Value;
        }
        set {
            _PowerUpProperty.Value = value;
            if (value != null) value.ParentAsteroid = this;
        }
    }
    
    public virtual P<Vector3> PositionProperty {
        get {
            return this._PositionProperty;
        }
    }
    
    public virtual Vector3 Position {
        get {
            return _PositionProperty.Value;
        }
        set {
            _PositionProperty.Value = value;
        }
    }
    
    public virtual CommandWithSenderAndArgument<AsteroidViewModel, Single> Damage {
        get {
            return _Damage;
        }
        set {
            _Damage = value;
        }
    }
    
    public virtual CommandWithSenderAndArgument<AsteroidViewModel, Boolean> Destroy {
        get {
            return _Destroy;
        }
        set {
            _Destroy = value;
        }
    }
    
    public virtual LevelManagerViewModel ParentLevelManager {
        get {
            return this._ParentLevelManager;
        }
        set {
            _ParentLevelManager = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var asteroid = controller as AsteroidControllerBase;
        this.Damage = new CommandWithSenderAndArgument<AsteroidViewModel, Single>(this, asteroid.Damage);
        this.Destroy = new CommandWithSenderAndArgument<AsteroidViewModel, Boolean>(this, asteroid.Destroy);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeFloat("Life", this.Life);
		if (stream.DeepSerialize) stream.SerializeObject("PowerUp", this.PowerUp);
        stream.SerializeVector3("Position", this.Position);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.Life = stream.DeserializeFloat("Life");;
		if (stream.DeepSerialize) this.PowerUp = stream.DeserializeObject<PowerUpBaseViewModel>("PowerUp");
        		this.Position = stream.DeserializeVector3("Position");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_LifeProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_PowerUpProperty, true, false, false));
        list.Add(new ViewModelPropertyInfo(_PositionProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("Damage", Damage) { ParameterType = typeof(Single) });
        list.Add(new ViewModelCommandInfo("Destroy", Destroy) { ParameterType = typeof(Boolean) });
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class LevelManagerViewModelBase : ViewModel {
    
    private IDisposable _ScoreDisposable;
    
    public P<PlayerShipViewModel> _PlayerProperty;
    
    public P<Vector3> _SpawnPointProperty;
    
    public P<Boolean> _GameOverProperty;
    
    public P<String> _NotificationTextProperty;
    
    public P<Int32> _ScoreProperty;
    
    public ModelCollection<AsteroidViewModel> _AsteroidsProperty;
    
    protected CommandWithSender<LevelManagerViewModel> _RestartLevel;
    
    protected CommandWithSenderAndArgument<LevelManagerViewModel, String> _ShowNotification;
    
    public LevelManagerViewModelBase(LevelManagerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public LevelManagerViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _PlayerProperty = new P<PlayerShipViewModel>(this, "Player");
        _SpawnPointProperty = new P<Vector3>(this, "SpawnPoint");
        _GameOverProperty = new P<Boolean>(this, "GameOver");
        _NotificationTextProperty = new P<String>(this, "NotificationText");
        _ScoreProperty = new P<Int32>(this, "Score");
        _AsteroidsProperty = new ModelCollection<AsteroidViewModel>(this, "Asteroids");
        _AsteroidsProperty.CollectionChanged += AsteroidsCollectionChanged;
        this.ResetScore();
        this.BindProperty(_PlayerProperty, p=> ResetScore());
    }
    
    public virtual void ResetScore() {
        if (_ScoreDisposable != null) _ScoreDisposable.Dispose();
        _ScoreDisposable = _ScoreProperty.ToComputed( ComputeScore, this.GetScoreDependents().ToArray() ).DisposeWith(this);
    }
    
    protected virtual void AsteroidsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
    
    public virtual Int32 ComputeScore() {
        return default(Int32);
    }
    
    public virtual IEnumerable<IObservableProperty> GetScoreDependents() {
        if (_PlayerProperty.Value != null) {
            yield return _PlayerProperty.Value._AsteroidsDestroyedProperty;
        }
        yield break;
    }
}

public partial class LevelManagerViewModel : LevelManagerViewModelBase {
    
    public LevelManagerViewModel(LevelManagerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public LevelManagerViewModel() : 
            base() {
    }
    
    public virtual P<PlayerShipViewModel> PlayerProperty {
        get {
            return this._PlayerProperty;
        }
    }
    
    public virtual PlayerShipViewModel Player {
        get {
            return _PlayerProperty.Value;
        }
        set {
            _PlayerProperty.Value = value;
            if (value != null) value.ParentLevelManager = this;
        }
    }
    
    public virtual P<Vector3> SpawnPointProperty {
        get {
            return this._SpawnPointProperty;
        }
    }
    
    public virtual Vector3 SpawnPoint {
        get {
            return _SpawnPointProperty.Value;
        }
        set {
            _SpawnPointProperty.Value = value;
        }
    }
    
    public virtual P<Boolean> GameOverProperty {
        get {
            return this._GameOverProperty;
        }
    }
    
    public virtual Boolean GameOver {
        get {
            return _GameOverProperty.Value;
        }
        set {
            _GameOverProperty.Value = value;
        }
    }
    
    public virtual P<String> NotificationTextProperty {
        get {
            return this._NotificationTextProperty;
        }
    }
    
    public virtual String NotificationText {
        get {
            return _NotificationTextProperty.Value;
        }
        set {
            _NotificationTextProperty.Value = value;
        }
    }
    
    public virtual P<Int32> ScoreProperty {
        get {
            return this._ScoreProperty;
        }
    }
    
    public virtual Int32 Score {
        get {
            return _ScoreProperty.Value;
        }
        set {
            _ScoreProperty.Value = value;
        }
    }
    
    public virtual ModelCollection<AsteroidViewModel> Asteroids {
        get {
            return this._AsteroidsProperty;
        }
    }
    
    public virtual CommandWithSender<LevelManagerViewModel> RestartLevel {
        get {
            return _RestartLevel;
        }
        set {
            _RestartLevel = value;
        }
    }
    
    public virtual CommandWithSenderAndArgument<LevelManagerViewModel, String> ShowNotification {
        get {
            return _ShowNotification;
        }
        set {
            _ShowNotification = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var levelManager = controller as LevelManagerControllerBase;
        this.RestartLevel = new CommandWithSender<LevelManagerViewModel>(this, levelManager.RestartLevel);
        this.ShowNotification = new CommandWithSenderAndArgument<LevelManagerViewModel, String>(this, levelManager.ShowNotification);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		if (stream.DeepSerialize) stream.SerializeObject("Player", this.Player);
        stream.SerializeVector3("SpawnPoint", this.SpawnPoint);
        stream.SerializeBool("GameOver", this.GameOver);
        stream.SerializeString("NotificationText", this.NotificationText);
        if (stream.DeepSerialize) stream.SerializeArray("Asteroids", this.Asteroids);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		if (stream.DeepSerialize) this.Player = stream.DeserializeObject<PlayerShipViewModel>("Player");
        		this.SpawnPoint = stream.DeserializeVector3("SpawnPoint");;
        		this.GameOver = stream.DeserializeBool("GameOver");;
        		this.NotificationText = stream.DeserializeString("NotificationText");;
if (stream.DeepSerialize) {
        this.Asteroids.Clear();
        this.Asteroids.AddRange(stream.DeserializeObjectArray<AsteroidViewModel>("Asteroids"));
}
    }
    
    public override void Unbind() {
        base.Unbind();
        _AsteroidsProperty.CollectionChanged -= AsteroidsCollectionChanged;
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_PlayerProperty, true, false, false));
        list.Add(new ViewModelPropertyInfo(_SpawnPointProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_GameOverProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_NotificationTextProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_ScoreProperty, false, false, false, true));
        list.Add(new ViewModelPropertyInfo(_AsteroidsProperty, true, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("RestartLevel", RestartLevel) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("ShowNotification", ShowNotification) { ParameterType = typeof(String) });
    }
    
    protected override void AsteroidsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        foreach (var item in args.OldItems.OfType<AsteroidViewModel>()) item.ParentLevelManager = null;;
        foreach (var item in args.NewItems.OfType<AsteroidViewModel>()) item.ParentLevelManager = this;;
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class BaseWeaponViewModelBase : ViewModel {
    
    public P<Single> _FireRateProperty;
    
    public ModelCollection<BaseProjectileViewModel> _ProjectilesProperty;
    
    protected CommandWithSender<BaseWeaponViewModel> _Fire;
    
    public BaseWeaponViewModelBase(BaseWeaponControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BaseWeaponViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _FireRateProperty = new P<Single>(this, "FireRate");
        _ProjectilesProperty = new ModelCollection<BaseProjectileViewModel>(this, "Projectiles");
        _ProjectilesProperty.CollectionChanged += ProjectilesCollectionChanged;
    }
    
    protected virtual void ProjectilesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
}

public partial class BaseWeaponViewModel : BaseWeaponViewModelBase {
    
    private PlayerShipViewModel _ParentPlayerShip;
    
    public BaseWeaponViewModel(BaseWeaponControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BaseWeaponViewModel() : 
            base() {
    }
    
    public virtual P<Single> FireRateProperty {
        get {
            return this._FireRateProperty;
        }
    }
    
    public virtual Single FireRate {
        get {
            return _FireRateProperty.Value;
        }
        set {
            _FireRateProperty.Value = value;
        }
    }
    
    public virtual ModelCollection<BaseProjectileViewModel> Projectiles {
        get {
            return this._ProjectilesProperty;
        }
    }
    
    public virtual CommandWithSender<BaseWeaponViewModel> Fire {
        get {
            return _Fire;
        }
        set {
            _Fire = value;
        }
    }
    
    public virtual PlayerShipViewModel ParentPlayerShip {
        get {
            return this._ParentPlayerShip;
        }
        set {
            _ParentPlayerShip = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var baseWeapon = controller as BaseWeaponControllerBase;
        this.Fire = new CommandWithSender<BaseWeaponViewModel>(this, baseWeapon.Fire);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeFloat("FireRate", this.FireRate);
        if (stream.DeepSerialize) stream.SerializeArray("Projectiles", this.Projectiles);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.FireRate = stream.DeserializeFloat("FireRate");;
if (stream.DeepSerialize) {
        this.Projectiles.Clear();
        this.Projectiles.AddRange(stream.DeserializeObjectArray<BaseProjectileViewModel>("Projectiles"));
}
    }
    
    public override void Unbind() {
        base.Unbind();
        _ProjectilesProperty.CollectionChanged -= ProjectilesCollectionChanged;
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_FireRateProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_ProjectilesProperty, true, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("Fire", Fire) { ParameterType = typeof(void) });
    }
    
    protected override void ProjectilesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        foreach (var item in args.OldItems.OfType<BaseProjectileViewModel>()) item.ParentBaseWeapon = null;;
        foreach (var item in args.NewItems.OfType<BaseProjectileViewModel>()) item.ParentBaseWeapon = this;;
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class BasicLaserViewModelBase : BaseWeaponViewModel {
    
    public BasicLaserViewModelBase(BasicLaserControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BasicLaserViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class BasicLaserViewModel : BasicLaserViewModelBase {
    
    public BasicLaserViewModel(BasicLaserControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BasicLaserViewModel() : 
            base() {
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class BaseProjectileViewModelBase : ViewModel {
    
    protected CommandWithSender<BaseProjectileViewModel> _Destroy;
    
    protected CommandWithSender<BaseProjectileViewModel> _Hit;
    
    public BaseProjectileViewModelBase(BaseProjectileControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BaseProjectileViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class BaseProjectileViewModel : BaseProjectileViewModelBase {
    
    private BaseWeaponViewModel _ParentBaseWeapon;
    
    public BaseProjectileViewModel(BaseProjectileControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BaseProjectileViewModel() : 
            base() {
    }
    
    public virtual CommandWithSender<BaseProjectileViewModel> Destroy {
        get {
            return _Destroy;
        }
        set {
            _Destroy = value;
        }
    }
    
    public virtual CommandWithSender<BaseProjectileViewModel> Hit {
        get {
            return _Hit;
        }
        set {
            _Hit = value;
        }
    }
    
    public virtual BaseWeaponViewModel ParentBaseWeapon {
        get {
            return this._ParentBaseWeapon;
        }
        set {
            _ParentBaseWeapon = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var baseProjectile = controller as BaseProjectileControllerBase;
        this.Destroy = new CommandWithSender<BaseProjectileViewModel>(this, baseProjectile.Destroy);
        this.Hit = new CommandWithSender<BaseProjectileViewModel>(this, baseProjectile.Hit);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("Destroy", Destroy) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("Hit", Hit) { ParameterType = typeof(void) });
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class LaserBoltViewModelBase : BaseProjectileViewModel {
    
    public ModelCollection<String> _CollectionProperty;
    
    public LaserBoltViewModelBase(LaserBoltControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public LaserBoltViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _CollectionProperty = new ModelCollection<String>(this, "Collection");
    }
}

public partial class LaserBoltViewModel : LaserBoltViewModelBase {
    
    public LaserBoltViewModel(LaserBoltControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public LaserBoltViewModel() : 
            base() {
    }
    
    public virtual ModelCollection<String> Collection {
        get {
            return this._CollectionProperty;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_CollectionProperty, false, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class PowerUpBaseViewModelBase : ViewModel {
    
    public P<Single> _ModifierProperty;
    
    public P<String> _DescriptionProperty;
    
    protected CommandWithSenderAndArgument<PowerUpBaseViewModel, PlayerShipViewModel> _ApplyPowerUp;
    
    public PowerUpBaseViewModelBase(PowerUpBaseControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PowerUpBaseViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _ModifierProperty = new P<Single>(this, "Modifier");
        _DescriptionProperty = new P<String>(this, "Description");
    }
}

public partial class PowerUpBaseViewModel : PowerUpBaseViewModelBase {
    
    private AsteroidViewModel _ParentAsteroid;
    
    public PowerUpBaseViewModel(PowerUpBaseControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PowerUpBaseViewModel() : 
            base() {
    }
    
    public virtual P<Single> ModifierProperty {
        get {
            return this._ModifierProperty;
        }
    }
    
    public virtual Single Modifier {
        get {
            return _ModifierProperty.Value;
        }
        set {
            _ModifierProperty.Value = value;
        }
    }
    
    public virtual P<String> DescriptionProperty {
        get {
            return this._DescriptionProperty;
        }
    }
    
    public virtual String Description {
        get {
            return _DescriptionProperty.Value;
        }
        set {
            _DescriptionProperty.Value = value;
        }
    }
    
    public virtual CommandWithSenderAndArgument<PowerUpBaseViewModel, PlayerShipViewModel> ApplyPowerUp {
        get {
            return _ApplyPowerUp;
        }
        set {
            _ApplyPowerUp = value;
        }
    }
    
    public virtual AsteroidViewModel ParentAsteroid {
        get {
            return this._ParentAsteroid;
        }
        set {
            _ParentAsteroid = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var powerUpBase = controller as PowerUpBaseControllerBase;
        this.ApplyPowerUp = new CommandWithSenderAndArgument<PowerUpBaseViewModel, PlayerShipViewModel>(this, powerUpBase.ApplyPowerUp);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeFloat("Modifier", this.Modifier);
        stream.SerializeString("Description", this.Description);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.Modifier = stream.DeserializeFloat("Modifier");;
        		this.Description = stream.DeserializeString("Description");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_ModifierProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_DescriptionProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("ApplyPowerUp", ApplyPowerUp) { ParameterType = typeof(PlayerShipViewModel) });
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class SpeedPowerUpViewModelBase : PowerUpBaseViewModel {
    
    public SpeedPowerUpViewModelBase(SpeedPowerUpControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public SpeedPowerUpViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class SpeedPowerUpViewModel : SpeedPowerUpViewModelBase {
    
    public SpeedPowerUpViewModel(SpeedPowerUpControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public SpeedPowerUpViewModel() : 
            base() {
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public class FireRatePowerUpViewModelBase : PowerUpBaseViewModel {
    
    public FireRatePowerUpViewModelBase(FireRatePowerUpControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public FireRatePowerUpViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class FireRatePowerUpViewModel : FireRatePowerUpViewModelBase {
    
    public FireRatePowerUpViewModel(FireRatePowerUpControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public FireRatePowerUpViewModel() : 
            base() {
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("SpaceShooter")]
public abstract class PlayerShipViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _FireTimeOutElapsed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _AsteroidsDestroyed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Weapon;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsAlive;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _MovementSpeed;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerShipViewModel);
        }
    }
    
    public PlayerShipViewModel PlayerShip {
        get {
            return ((PlayerShipViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerShipController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PlayerShipViewModel playerShip = ((PlayerShipViewModel)(viewModel));
        playerShip.FireTimeOutElapsed = this._FireTimeOutElapsed;
        playerShip.AsteroidsDestroyed = this._AsteroidsDestroyed;
        playerShip.Weapon = this._Weapon == null ? null : this._Weapon.ViewModelObject as BaseWeaponViewModel;
        playerShip.IsAlive = this._IsAlive;
        playerShip.MovementSpeed = this._MovementSpeed;
    }
    
    public virtual void ExecuteDestroy() {
        this.ExecuteCommand(PlayerShip.Destroy);
    }
    
    public virtual void ExecuteRestart() {
        this.ExecuteCommand(PlayerShip.Restart);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class AsteroidViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Life;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _PowerUp;
    
    public override System.Type ViewModelType {
        get {
            return typeof(AsteroidViewModel);
        }
    }
    
    public AsteroidViewModel Asteroid {
        get {
            return ((AsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        AsteroidViewModel asteroid = ((AsteroidViewModel)(viewModel));
        asteroid.Life = this._Life;
        asteroid.PowerUp = this._PowerUp == null ? null : this._PowerUp.ViewModelObject as PowerUpBaseViewModel;
    }
    
    public virtual void ExecuteDamage(Single arg) {
        this.ExecuteCommand(Asteroid.Damage, arg);
    }
    
    public virtual void ExecuteDestroy(Boolean arg) {
        this.ExecuteCommand(Asteroid.Destroy, arg);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class LevelManagerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Player;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _SpawnPoint;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _GameOver;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _NotificationText;
    
    public override string DefaultIdentifier {
        get {
            return "LevelManager";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(LevelManagerViewModel);
        }
    }
    
    public LevelManagerViewModel LevelManager {
        get {
            return ((LevelManagerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelManagerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        LevelManagerViewModel levelManager = ((LevelManagerViewModel)(viewModel));
        levelManager.Player = this._Player == null ? null : this._Player.ViewModelObject as PlayerShipViewModel;
        levelManager.SpawnPoint = this._SpawnPoint;
        levelManager.GameOver = this._GameOver;
        levelManager.NotificationText = this._NotificationText;
    }
    
    public virtual void ExecuteRestartLevel() {
        this.ExecuteCommand(LevelManager.RestartLevel);
    }
    
    public virtual void ExecuteShowNotification(String arg) {
        this.ExecuteCommand(LevelManager.ShowNotification, arg);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class BaseWeaponViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _FireRate;
    
    public override System.Type ViewModelType {
        get {
            return typeof(BaseWeaponViewModel);
        }
    }
    
    public BaseWeaponViewModel BaseWeapon {
        get {
            return ((BaseWeaponViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BaseWeaponController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        BaseWeaponViewModel baseWeapon = ((BaseWeaponViewModel)(viewModel));
        baseWeapon.FireRate = this._FireRate;
    }
    
    public virtual void ExecuteFire() {
        this.ExecuteCommand(BaseWeapon.Fire);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class BasicLaserViewBase : BaseWeaponViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BasicLaserViewModel);
        }
    }
    
    public BasicLaserViewModel BasicLaser {
        get {
            return ((BasicLaserViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BasicLaserController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class BaseProjectileViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BaseProjectileViewModel);
        }
    }
    
    public BaseProjectileViewModel BaseProjectile {
        get {
            return ((BaseProjectileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BaseProjectileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
    
    public virtual void ExecuteDestroy() {
        this.ExecuteCommand(BaseProjectile.Destroy);
    }
    
    public virtual void ExecuteHit() {
        this.ExecuteCommand(BaseProjectile.Hit);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class LaserBoltViewBase : BaseProjectileViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(LaserBoltViewModel);
        }
    }
    
    public LaserBoltViewModel LaserBolt {
        get {
            return ((LaserBoltViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LaserBoltController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class PowerUpBaseViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Modifier;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Description;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PowerUpBaseViewModel);
        }
    }
    
    public PowerUpBaseViewModel PowerUpBase {
        get {
            return ((PowerUpBaseViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PowerUpBaseController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PowerUpBaseViewModel powerUpBase = ((PowerUpBaseViewModel)(viewModel));
        powerUpBase.Modifier = this._Modifier;
        powerUpBase.Description = this._Description;
    }
    
    public virtual void ExecuteApplyPowerUp(PlayerShipViewModel playerShip) {
        this.ExecuteCommand(PowerUpBase.ApplyPowerUp, playerShip);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class SpeedPowerUpViewBase : PowerUpBaseViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SpeedPowerUpViewModel);
        }
    }
    
    public SpeedPowerUpViewModel SpeedPowerUp {
        get {
            return ((SpeedPowerUpViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SpeedPowerUpController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("SpaceShooter")]
public abstract class FireRatePowerUpViewBase : PowerUpBaseViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(FireRatePowerUpViewModel);
        }
    }
    
    public FireRatePowerUpViewModel FireRatePowerUp {
        get {
            return ((FireRatePowerUpViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FireRatePowerUpController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public class PlayerShipViewViewBase : PlayerShipViewBase {
    
    private IDisposable _IsMovingDisposable;
    
    private IDisposable _FiringCommandDisposable;
    
    private IDisposable _ShouldFireDisposable;
    
    [UFToggleGroup("MovementStateMachine")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MovementStateMachineChanged")]
    public bool _BindMovementStateMachine = true;
    
    [UFToggleGroup("FireStateMachine")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("FireStateMachineChanged")]
    public bool _BindFireStateMachine = true;
    
    [UFToggleGroup("IsAlive")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsAliveChanged")]
    public bool _BindIsAlive = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerShipController>());
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void MovementStateMachineChanged(Invert.StateMachine.State value) {
        if (value is Idle) {
            this.OnIdle();
        }
        if (value is Move) {
            this.OnMove();
        }
    }
    
    public virtual void OnIdle() {
    }
    
    public virtual void OnMove() {
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void FireStateMachineChanged(Invert.StateMachine.State value) {
        if (value is Stop) {
            this.OnStop();
        }
        if (value is Fire) {
            this.OnFire();
        }
    }
    
    public virtual void OnStop() {
    }
    
    public virtual void OnFire() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsAliveChanged(Boolean value) {
    }
    
    public virtual void ResetIsMoving() {
        if (_IsMovingDisposable != null) _IsMovingDisposable.Dispose();
        _IsMovingDisposable = GetIsMovingObservable().Subscribe(PlayerShip._IsMovingProperty).DisposeWith(this);
    }
    
    protected virtual Boolean CalculateIsMoving() {
        return default(Boolean);
    }
    
    protected virtual UniRx.IObservable<Boolean> GetIsMovingObservable() {
        return this.UpdateAsObservable().Select(p => CalculateIsMoving());
    }
    
    public virtual void ResetFiringCommand() {
        if (_FiringCommandDisposable != null) _FiringCommandDisposable.Dispose();
        _FiringCommandDisposable = GetFiringCommandObservable().Subscribe(PlayerShip._FiringCommandProperty).DisposeWith(this);
    }
    
    protected virtual Boolean CalculateFiringCommand() {
        return default(Boolean);
    }
    
    protected virtual UniRx.IObservable<Boolean> GetFiringCommandObservable() {
        return this.UpdateAsObservable().Select(p => CalculateFiringCommand());
    }
    
    public virtual void ResetShouldFire() {
        if (_ShouldFireDisposable != null) _ShouldFireDisposable.Dispose();
        _ShouldFireDisposable = GetShouldFireObservable().Subscribe(PlayerShip._ShouldFireProperty).DisposeWith(this);
    }
    
    protected virtual Boolean CalculateShouldFire() {
        return default(Boolean);
    }
    
    protected virtual UniRx.IObservable<Boolean> GetShouldFireObservable() {
        return this.UpdateAsObservable().Select(p => CalculateShouldFire());
    }
    
    public override void Bind() {
        base.Bind();
        ResetIsMoving();
        ResetFiringCommand();
        ResetShouldFire();
        if (this._BindMovementStateMachine) {
            this.BindProperty(PlayerShip._MovementStateMachineProperty, this.MovementStateMachineChanged);
        }
        if (this._BindFireStateMachine) {
            this.BindProperty(PlayerShip._FireStateMachineProperty, this.FireStateMachineChanged);
        }
        if (this._BindIsAlive) {
            this.BindProperty(PlayerShip._IsAliveProperty, this.IsAliveChanged);
        }
    }
}

public partial class PlayerShipView : PlayerShipViewViewBase {
}

public class LevelManagerViewViewBase : LevelManagerViewBase {
    
    [UFToggleGroup("Asteroids")]
    [UnityEngine.HideInInspector()]
    public bool _BindAsteroids = true;
    
    [UFGroup("Asteroids")]
    [UnityEngine.HideInInspector()]
    public bool _AsteroidsSceneFirst;
    
    [UFGroup("Asteroids")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _AsteroidsContainer;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    public bool _BindScore = true;
    
    [UFToggleGroup("SpawnPoint")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SpawnPointChanged")]
    public bool _BindSpawnPoint = true;
    
    [UFToggleGroup("GameOver")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GameOverChanged")]
    public bool _BindGameOver = true;
    
    [UFToggleGroup("RestartLevel")]
    [UnityEngine.HideInInspector()]
    public bool _BindRestartLevel = true;
    
    [UFToggleGroup("Player")]
    [UnityEngine.HideInInspector()]
    public bool _BindPlayer = true;
    
    [UFToggleGroup("NotificationText")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("NotificationTextChanged")]
    public bool _BindNotificationText = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelManagerController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateAsteroidsView(AsteroidViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AsteroidsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AsteroidsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SpawnPointChanged(Vector3 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void GameOverChanged(Boolean value) {
    }
    
    /// Invokes RestartLevelExecuted when the RestartLevel command is executed.
    public virtual void RestartLevelExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PlayerChanged(PlayerShipViewModel value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void NotificationTextChanged(String value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindAsteroids) {
            this.BindToViewCollection( LevelManager._AsteroidsProperty, viewModel=>{ return CreateAsteroidsView(viewModel as AsteroidViewModel); }, AsteroidsAdded, AsteroidsRemoved, _AsteroidsContainer, _AsteroidsSceneFirst);
        }
        if (this._BindScore) {
            this.BindProperty(LevelManager._ScoreProperty, this.ScoreChanged);
        }
        if (this._BindSpawnPoint) {
            this.BindProperty(LevelManager._SpawnPointProperty, this.SpawnPointChanged);
        }
        if (this._BindGameOver) {
            this.BindProperty(LevelManager._GameOverProperty, this.GameOverChanged);
        }
        if (this._BindRestartLevel) {
            this.BindCommandExecuted(LevelManager.RestartLevel, RestartLevelExecuted);
        }
        if (this._BindPlayer) {
            this.BindProperty(LevelManager._PlayerProperty, this.PlayerChanged);
        }
        if (this._BindNotificationText) {
            this.BindProperty(LevelManager._NotificationTextProperty, this.NotificationTextChanged);
        }
    }
}

public partial class LevelManagerView : LevelManagerViewViewBase {
}

public class AsteroidViewViewBase : AsteroidViewBase {
    
    private IDisposable _PositionDisposable;
    
    [UFToggleGroup("PowerUp")]
    [UnityEngine.HideInInspector()]
    public bool _BindPowerUp = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PowerUpChanged(PowerUpBaseViewModel value) {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(Asteroid._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        if (this._BindPowerUp) {
            this.BindProperty(Asteroid._PowerUpProperty, this.PowerUpChanged);
        }
    }
}

public partial class AsteroidView : AsteroidViewViewBase {
}

public class LaserBoltViewViewBase : LaserBoltViewBase {
    
    [UFToggleGroup("Destroy")]
    [UnityEngine.HideInInspector()]
    public bool _BindDestroy = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LaserBoltController>());
    }
    
    /// Invokes DestroyExecuted when the Destroy command is executed.
    public virtual void DestroyExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindDestroy) {
            this.BindCommandExecuted(LaserBolt.Destroy, DestroyExecuted);
        }
    }
}

public partial class LaserBoltView : LaserBoltViewViewBase {
}

public class BasicLaserViewViewBase : BasicLaserViewBase {
    
    [UFToggleGroup("Fire")]
    [UnityEngine.HideInInspector()]
    public bool _BindFire = true;
    
    [UFToggleGroup("Projectiles")]
    [UnityEngine.HideInInspector()]
    public bool _BindProjectiles = true;
    
    [UFGroup("Projectiles")]
    [UnityEngine.HideInInspector()]
    public bool _ProjectilesSceneFirst;
    
    [UFGroup("Projectiles")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _ProjectilesContainer;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BasicLaserController>());
    }
    
    /// Invokes FireExecuted when the Fire command is executed.
    public virtual void FireExecuted() {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateProjectilesView(BaseProjectileViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ProjectilesAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ProjectilesRemoved(ViewBase item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindFire) {
            this.BindCommandExecuted(BasicLaser.Fire, FireExecuted);
        }
        if (this._BindProjectiles) {
            this.BindToViewCollection( BasicLaser._ProjectilesProperty, viewModel=>{ return CreateProjectilesView(viewModel as BaseProjectileViewModel); }, ProjectilesAdded, ProjectilesRemoved, _ProjectilesContainer, _ProjectilesSceneFirst);
        }
    }
}

public partial class BasicLaserView : BasicLaserViewViewBase {
}

public class SpeedPowerUpViewViewBase : SpeedPowerUpViewBase {
    
    [UFToggleGroup("ApplyPowerUp")]
    [UnityEngine.HideInInspector()]
    public bool _BindApplyPowerUp = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SpeedPowerUpController>());
    }
    
    /// Invokes ApplyPowerUpExecuted when the ApplyPowerUp command is executed.
    public virtual void ApplyPowerUpExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindApplyPowerUp) {
            this.BindCommandExecuted(SpeedPowerUp.ApplyPowerUp, ApplyPowerUpExecuted);
        }
    }
}

public partial class SpeedPowerUpView : SpeedPowerUpViewViewBase {
}

public class FireRatePowerUpViewViewBase : FireRatePowerUpViewBase {
    
    [UFToggleGroup("ApplyPowerUp")]
    [UnityEngine.HideInInspector()]
    public bool _BindApplyPowerUp = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FireRatePowerUpController>());
    }
    
    /// Invokes ApplyPowerUpExecuted when the ApplyPowerUp command is executed.
    public virtual void ApplyPowerUpExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindApplyPowerUp) {
            this.BindCommandExecuted(FireRatePowerUp.ApplyPowerUp, ApplyPowerUpExecuted);
        }
    }
}

public partial class FireRatePowerUpView : FireRatePowerUpViewViewBase {
}

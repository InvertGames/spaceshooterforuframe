// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using UnityEngine;


public abstract class PlayerShipControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public LevelManagerController LevelManagerController {get;set;}
    [Inject] public PowerUpBaseController PowerUpBaseController {get;set;}
    [Inject] public BaseWeaponController BaseWeaponController {get;set;}
    public abstract void InitializePlayerShip(PlayerShipViewModel playerShip);
    
    public override ViewModel CreateEmpty() {
        return new PlayerShipViewModel(this);
    }
    
    public virtual PlayerShipViewModel CreatePlayerShip() {
        return ((PlayerShipViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePlayerShip(((PlayerShipViewModel)(viewModel)));
    }
    
    public virtual void Destroy(PlayerShipViewModel playerShip) {
    }
    
    public virtual void Restart(PlayerShipViewModel playerShip) {
    }
}

public abstract class AsteroidControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public LevelManagerController LevelManagerController {get;set;}
    [Inject] public PowerUpBaseController PowerUpBaseController {get;set;}
    public abstract void InitializeAsteroid(AsteroidViewModel asteroid);
    
    public override ViewModel CreateEmpty() {
        return new AsteroidViewModel(this);
    }
    
    public virtual AsteroidViewModel CreateAsteroid() {
        return ((AsteroidViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeAsteroid(((AsteroidViewModel)(viewModel)));
    }
    
    public virtual void Damage(AsteroidViewModel asteroid, Single arg) {
    }
    
    public virtual void Destroy(AsteroidViewModel asteroid, Boolean arg) {
    }
}

public abstract class LevelManagerControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public PlayerShipController PlayerShipController {get;set;}
    [Inject] public AsteroidController AsteroidController {get;set;}
    public abstract void InitializeLevelManager(LevelManagerViewModel levelManager);
    
    public override ViewModel CreateEmpty() {
        return new LevelManagerViewModel(this);
    }
    
    public virtual LevelManagerViewModel CreateLevelManager() {
        return ((LevelManagerViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeLevelManager(((LevelManagerViewModel)(viewModel)));
    }
    
    public virtual void RestartLevel(LevelManagerViewModel levelManager) {
    }
    
    public virtual void ShowNotification(LevelManagerViewModel levelManager, String arg) {
    }
}

public abstract class BaseWeaponControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public PlayerShipController PlayerShipController {get;set;}
    [Inject] public BaseProjectileController BaseProjectileController {get;set;}
    public abstract void InitializeBaseWeapon(BaseWeaponViewModel baseWeapon);
    
    public virtual BaseWeaponViewModel CreateBaseWeapon() {
        return ((BaseWeaponViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeBaseWeapon(((BaseWeaponViewModel)(viewModel)));
    }
    
    public virtual void Fire(BaseWeaponViewModel baseWeapon) {
    }
}

public abstract class BasicLaserControllerBase : BaseWeaponController {
    
    public abstract void InitializeBasicLaser(BasicLaserViewModel basicLaser);
    
    public override ViewModel CreateEmpty() {
        return new BasicLaserViewModel(this);
    }
    
    public virtual BasicLaserViewModel CreateBasicLaser() {
        return ((BasicLaserViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeBasicLaser(((BasicLaserViewModel)(viewModel)));
    }
}

public abstract class BaseProjectileControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public BaseWeaponController BaseWeaponController {get;set;}
    public abstract void InitializeBaseProjectile(BaseProjectileViewModel baseProjectile);
    
    public virtual BaseProjectileViewModel CreateBaseProjectile() {
        return ((BaseProjectileViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeBaseProjectile(((BaseProjectileViewModel)(viewModel)));
    }
    
    public virtual void Destroy(BaseProjectileViewModel baseProjectile) {
    }
    
    public virtual void Hit(BaseProjectileViewModel baseProjectile) {
    }
}

public abstract class LaserBoltControllerBase : BaseProjectileController {
    
    public abstract void InitializeLaserBolt(LaserBoltViewModel laserBolt);
    
    public override ViewModel CreateEmpty() {
        return new LaserBoltViewModel(this);
    }
    
    public virtual LaserBoltViewModel CreateLaserBolt() {
        return ((LaserBoltViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeLaserBolt(((LaserBoltViewModel)(viewModel)));
    }
}

public abstract class PowerUpBaseControllerBase : Controller {
    
    [Inject("LevelManager")] public LevelManagerViewModel LevelManager { get; set; }
    [Inject] public AsteroidController AsteroidController {get;set;}
    [Inject] public PlayerShipController PlayerShipController {get;set;}
    public abstract void InitializePowerUpBase(PowerUpBaseViewModel powerUpBase);
    
    public virtual PowerUpBaseViewModel CreatePowerUpBase() {
        return ((PowerUpBaseViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePowerUpBase(((PowerUpBaseViewModel)(viewModel)));
    }
    
    public virtual void ApplyPowerUp(PowerUpBaseViewModel powerUpBase, PlayerShipViewModel arg) {
    }
}

public abstract class SpeedPowerUpControllerBase : PowerUpBaseController {
    
    public abstract void InitializeSpeedPowerUp(SpeedPowerUpViewModel speedPowerUp);
    
    public override ViewModel CreateEmpty() {
        return new SpeedPowerUpViewModel(this);
    }
    
    public virtual SpeedPowerUpViewModel CreateSpeedPowerUp() {
        return ((SpeedPowerUpViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeSpeedPowerUp(((SpeedPowerUpViewModel)(viewModel)));
    }
}

public abstract class FireRatePowerUpControllerBase : PowerUpBaseController {
    
    public abstract void InitializeFireRatePowerUp(FireRatePowerUpViewModel fireRatePowerUp);
    
    public override ViewModel CreateEmpty() {
        return new FireRatePowerUpViewModel(this);
    }
    
    public virtual FireRatePowerUpViewModel CreateFireRatePowerUp() {
        return ((FireRatePowerUpViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeFireRatePowerUp(((FireRatePowerUpViewModel)(viewModel)));
    }
}

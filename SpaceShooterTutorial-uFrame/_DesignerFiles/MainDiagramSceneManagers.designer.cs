// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class LevelSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class LevelSceneManagerBase : SceneManager {
    
    private LevelManagerViewModel _LevelManager;
    
    private PlayerShipController _PlayerShipController;
    
    private AsteroidController _AsteroidController;
    
    private LevelManagerController _LevelManagerController;
    
    private BaseWeaponController _BaseWeaponController;
    
    private BasicLaserController _BasicLaserController;
    
    private BaseProjectileController _BaseProjectileController;
    
    private LaserBoltController _LaserBoltController;
    
    private PowerUpBaseController _PowerUpBaseController;
    
    private SpeedPowerUpController _SpeedPowerUpController;
    
    private FireRatePowerUpController _FireRatePowerUpController;
    
    public LevelSceneManagerSettings _LevelSceneManagerSettings = new LevelSceneManagerSettings();
    
    [Inject("LevelManager")]
    public virtual LevelManagerViewModel LevelManager {
        get {
            if ((this._LevelManager == null)) {
                this._LevelManager = CreateInstanceViewModel<LevelManagerViewModel>(LevelManagerController, "LevelManager");
            }
            return this._LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    [Inject()]
    public virtual PlayerShipController PlayerShipController {
        get {
            if ((this._PlayerShipController == null)) {
                this._PlayerShipController = new PlayerShipController() { Container = Container };
            }
            return this._PlayerShipController;
        }
        set {
            _PlayerShipController = value;
        }
    }
    
    [Inject()]
    public virtual AsteroidController AsteroidController {
        get {
            if ((this._AsteroidController == null)) {
                this._AsteroidController = new AsteroidController() { Container = Container };
            }
            return this._AsteroidController;
        }
        set {
            _AsteroidController = value;
        }
    }
    
    [Inject()]
    public virtual LevelManagerController LevelManagerController {
        get {
            if ((this._LevelManagerController == null)) {
                this._LevelManagerController = new LevelManagerController() { Container = Container };
            }
            return this._LevelManagerController;
        }
        set {
            _LevelManagerController = value;
        }
    }
    
    [Inject()]
    public virtual BaseWeaponController BaseWeaponController {
        get {
            if ((this._BaseWeaponController == null)) {
                this._BaseWeaponController = new BaseWeaponController() { Container = Container };
            }
            return this._BaseWeaponController;
        }
        set {
            _BaseWeaponController = value;
        }
    }
    
    [Inject()]
    public virtual BasicLaserController BasicLaserController {
        get {
            if ((this._BasicLaserController == null)) {
                this._BasicLaserController = new BasicLaserController() { Container = Container };
            }
            return this._BasicLaserController;
        }
        set {
            _BasicLaserController = value;
        }
    }
    
    [Inject()]
    public virtual BaseProjectileController BaseProjectileController {
        get {
            if ((this._BaseProjectileController == null)) {
                this._BaseProjectileController = new BaseProjectileController() { Container = Container };
            }
            return this._BaseProjectileController;
        }
        set {
            _BaseProjectileController = value;
        }
    }
    
    [Inject()]
    public virtual LaserBoltController LaserBoltController {
        get {
            if ((this._LaserBoltController == null)) {
                this._LaserBoltController = new LaserBoltController() { Container = Container };
            }
            return this._LaserBoltController;
        }
        set {
            _LaserBoltController = value;
        }
    }
    
    [Inject()]
    public virtual PowerUpBaseController PowerUpBaseController {
        get {
            if ((this._PowerUpBaseController == null)) {
                this._PowerUpBaseController = new PowerUpBaseController() { Container = Container };
            }
            return this._PowerUpBaseController;
        }
        set {
            _PowerUpBaseController = value;
        }
    }
    
    [Inject()]
    public virtual SpeedPowerUpController SpeedPowerUpController {
        get {
            if ((this._SpeedPowerUpController == null)) {
                this._SpeedPowerUpController = new SpeedPowerUpController() { Container = Container };
            }
            return this._SpeedPowerUpController;
        }
        set {
            _SpeedPowerUpController = value;
        }
    }
    
    [Inject()]
    public virtual FireRatePowerUpController FireRatePowerUpController {
        get {
            if ((this._FireRatePowerUpController == null)) {
                this._FireRatePowerUpController = new FireRatePowerUpController() { Container = Container };
            }
            return this._FireRatePowerUpController;
        }
        set {
            _FireRatePowerUpController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<LevelManagerViewModel>(LevelManager,"LevelManager");
        Container.RegisterController<PlayerShipController>(PlayerShipController);
        Container.RegisterController<AsteroidController>(AsteroidController);
        Container.RegisterController<LevelManagerController>(LevelManagerController);
        Container.RegisterController<BaseWeaponController>(BaseWeaponController);
        Container.RegisterController<BasicLaserController>(BasicLaserController);
        Container.RegisterController<BaseProjectileController>(BaseProjectileController);
        Container.RegisterController<LaserBoltController>(LaserBoltController);
        Container.RegisterController<PowerUpBaseController>(PowerUpBaseController);
        Container.RegisterController<SpeedPowerUpController>(SpeedPowerUpController);
        Container.RegisterController<FireRatePowerUpController>(FireRatePowerUpController);
        this.Container.InjectAll();
        LevelManagerController.Initialize(LevelManager);
    }
    
    public override void Initialize() {
        base.Initialize();
    }
}
